/*
 Navicat Premium Data Transfer

 Source Server         : default
 Source Server Type    : MySQL
 Source Server Version : 80022
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80022
 File Encoding         : 65001

 Date: 06/01/2021 14:13:53
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '内容',
  `firstPicture` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '首图',
  `flag` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标记',
  `views` int NULL DEFAULT 0 COMMENT '浏览次数',
  `appreciation` tinyint(1) NULL DEFAULT NULL COMMENT '赞赏是否开启',
  `shareStatement` tinyint(1) NULL DEFAULT NULL COMMENT '转载声明是否开启',
  `commentabled` tinyint(1) NULL DEFAULT NULL COMMENT '评论是否开启',
  `published` tinyint(1) NULL DEFAULT NULL COMMENT '是否发布',
  `recommend` tinyint(1) NULL DEFAULT NULL COMMENT '是否推荐',
  `createTime` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` timestamp NULL DEFAULT NULL COMMENT '更新时间',
  `t_id` bigint NULL DEFAULT NULL COMMENT '类型id',
  `u_id` bigint NULL DEFAULT NULL COMMENT '用户id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES (5, 'MyBatisPlus+Redis', '<h1 id=\"mybatisplusredis\">MyBatisPlus+Redis</h1>\n<p>引入MybatisPlus依赖</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>mybatis-plus</p>\n<pre><code class=\"language-properties\">#日志\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n</code></pre>\n<h2 id=\"主键生成策略\">主键生成策略</h2>\n<pre><code class=\"language-java\">@TableId(type =IdType.ASSIGN_ID)\n</code></pre>\n<pre><code class=\"language-java\">	AUTO(0),\n    NONE(1),\n    INPUT(2),\n    ASSIGN_ID(3),\n    ASSIGN_UUID(4),\n    /** @deprecated */\n    @Deprecated\n    ID_WORKER(3),\n    /** @deprecated */\n    @Deprecated\n    ID_WORKER_STR(3),\n    /** @deprecated */\n    @Deprecated\n    UUID(4);\n</code></pre>\n<h2 id=\"自动填充\">自动填充</h2>\n<blockquote>\n<p>代码级别</p>\n</blockquote>\n<ul>\n<li>增加两个字段create_time,update_time</li>\n</ul>\n<pre><code class=\"language-java\">/*字段添加填充内容*/\n    @TableField(fill = FieldFill.INSERT)\n    private Date createTime;\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Date updateTime;\n</code></pre>\n<ul>\n<li>编写处理器来处理注解</li>\n</ul>\n<pre><code class=\"language-java\">package com.kuang.handler;\n<p>import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;</p>\n<p>import java.util.Date;</p>\n<p>@Slf4j\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n//插入时候的填充策略\n@Override\npublic void insertFill(MetaObject metaObject) {\nlog.info(&quot;start insert fill&quot;);\nthis.setFieldValByName(&quot;createTime&quot;,new Date(),metaObject);\nthis.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);\n}</p>\n<pre><code>//更新时候的填充策略\n@Override\npublic void updateFill(MetaObject metaObject) {\n    log.info(&amp;quot;start update fill&amp;quot;);\n    this.setFieldValByName(&amp;quot;updateTime&amp;quot;,new Date\n                           (),metaObject);\n}\n</code></pre>\n<p>}\n</code></pre></p>\n<h2 id=\"乐观锁\">乐观锁</h2>\n<pre><code>OptimisticLockerInterceptor\n</code></pre>\n<blockquote>\n<p>当要更新一条记录的时候，希望这条记录没有被别人更新\n乐观锁实现方式：</p>\n<blockquote>\n<ul>\n<li>取出记录时，获取当前version</li>\n<li>更新时，带上这个version</li>\n<li>执行更新时， set version = newVersion where version = oldVersion</li>\n<li>如果version不对，就更新失败</li>\n</ul>\n</blockquote>\n</blockquote>\n<ul>\n<li>数据库增加字段version</li>\n<li>实体类增加注解</li>\n</ul>\n<pre><code class=\"language-java\">	@Version\n    private Integer version;\n</code></pre>\n<p>mybatisPlus的乐观锁配置类</p>\n<pre><code class=\"language-java\">package com.kuang.config;\n<p>import com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;</p>\n<p>@MapperScan(&quot;com.kuang.mapper&quot;)\n@EnableTransactionManagement\n@Configuration\npublic class MybatisPlusConfig {\n/<em>注册乐观锁插件</em>/\n@Bean\npublic MybatisPlusInterceptor MybatisPlusInterceptor() {\nMybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\nmybatisPlusInterceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());\nreturn mybatisPlusInterceptor;\n}\n}</p>\n<p></code></pre></p>\n<h2 id=\"查询操作\">查询操作</h2>\n<pre><code class=\"language-java\">@Test\n    public void testSelectById(){\n        User user = userMapper.selectById(6);\n        System.out.println(user);\n    }\n    @Test\n    public void testSelectByMap(){\n        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;name&quot;,&quot;狂神说&quot;);\n        map.put(&quot;age&quot;,18);\n        List&lt;User&gt; users = userMapper.selectByMap(map);\n    }\n    @Test\n    public void testSelectBatchIds(){\n        List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(1,2,3));\n    }\n</code></pre>\n<h2 id=\"分页查询\">分页查询</h2>\n<p>注册分页插件</p>\n<pre><code class=\"language-java\">@Bean\n    public PaginationInterceptor paginationInterceptor() {\n        return new PaginationInterceptor();\n    }\n</code></pre>\n<pre><code class=\"language-java\">@Test\n    public void testPage(){\n        Page&lt;User&gt; page = new Page&lt;&gt;(2,5);\n        userMapper.selectPage(page,null);\n        page.getRecords().forEach(System.out::println);\n        System.out.println(page.getTotal());\n    }\n</code></pre>\n<h2 id=\"删除与逻辑删除\">删除与逻辑删除</h2>\n<ul>\n<li>yaml配置</li>\n</ul>\n<pre><code class=\"language-yaml\">mybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: flag  # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n</code></pre>\n<ul>\n<li>根据条件删除</li>\n</ul>\n<pre><code class=\"language-java\">    @Test\n    public void testDeleteById(){\n        userMapper.deleteById(1333000029585735682L);\n    }\n<pre><code>@Test\npublic void testDeleteMatchIds(){\n    userMapper.deleteBatchIds(Arrays.asList(1332999768003813377L,1332984486426275841L));\n}\n<p>@Test\npublic void testDeleteByMap(){\nHashMap&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();\nmap.put(&amp;quot;name&amp;quot;,&amp;quot;狂神说&amp;quot;);\nuserMapper.deleteByMap(map);\n}\n</code></pre></p>\n<p></code></pre></p>\n<h2 id=\"代码自动生成\">代码自动生成</h2>\n<ul>\n<li>主要类</li>\n</ul>\n<pre><code class=\"language-java\">package com.kuang;\n<p>import com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.generator.AutoGenerator;\nimport com.baomidou.mybatisplus.generator.config.*;\nimport com.baomidou.mybatisplus.generator.config.po.TableFill;\nimport com.baomidou.mybatisplus.generator.config.rules.DateType;\nimport com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;\nimport org.junit.jupiter.api.Test;</p>\n<p>import java.util.ArrayList;</p>\n<p>// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中\npublic class CodeGenerator {\n@Test\npublic void testGenerator(){\n//构建代码生成器对象\nAutoGenerator mpg = new AutoGenerator();</p>\n<pre><code>    //配置策略\n    GlobalConfig gc = new GlobalConfig();\n    String projectPath = System.getProperty(&amp;quot;user.dir&amp;quot;);//获取当前目录\n    gc.setOutputDir(projectPath+&amp;quot;/src/main/java&amp;quot;);//代码生成目录\n    gc.setAuthor(&amp;quot;狂神说&amp;quot;);//作者信息\n    gc.setOpen(false);//是否打开文件管理器\n    gc.setFileOverride(false);//是否覆盖原来生成的\n    gc.setServiceName(&amp;quot;%sService&amp;quot;);//去service的I前缀\n    gc.setIdType(IdType.ASSIGN_ID);//主键生成策略\n    gc.setDateType(DateType.ONLY_DATE);//只是date类型\n    /*gc.setSwagger2(true);//是否使用Swagger生成注释文档*/\n    mpg.setGlobalConfig(gc);\n<pre><code>//设置数据源\nDataSourceConfig dsc = new DataSourceConfig();\ndsc.setUsername(&amp;amp;quot;root&amp;amp;quot;);\ndsc.setPassword(&amp;amp;quot;root&amp;amp;quot;);\ndsc.setUrl(&amp;amp;quot;jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;amp;quot;);\ndsc.setDriverName(&amp;amp;quot;com.mysql.jdbc.Driver&amp;amp;quot;);\ndsc.setDbType(DbType.MYSQL);\n<p>mpg.setDataSource(dsc);\n//配置包\nPackageConfig pc = new PackageConfig();\npc.setModuleName(&amp;amp;quot;blog&amp;amp;quot;);//模块名\npc.setParent(&amp;amp;quot;com.kuang&amp;amp;quot;);//模块前缀\n//模块下的包\npc.setEntity(&amp;amp;quot;entity&amp;amp;quot;);\npc.setMapper(&amp;amp;quot;mapper&amp;amp;quot;);\npc.setService(&amp;amp;quot;service&amp;amp;quot;);\npc.setController(&amp;amp;quot;controller&amp;amp;quot;);\nmpg.setPackageInfo(pc);</p>\n<p>// 策略配置\nStrategyConfig strategy = new StrategyConfig();\nstrategy.setInclude(&amp;amp;quot;user&amp;amp;quot;);//设置要映射的表名\nstrategy.setNaming(NamingStrategy.underline_to_camel);\nstrategy.setColumnNaming(NamingStrategy.underline_to_camel);\nstrategy.setEntityLombokModel(true);//自动配lombok\nstrategy.setRestControllerStyle(true);\n//逻辑删除策略\nstrategy.setLogicDeleteFieldName(&amp;amp;quot;deleted&amp;amp;quot;);\n//自动填充配置\nTableFill createTime = new TableFill(&amp;amp;quot;createTime&amp;amp;quot;, FieldFill.INSERT);\nTableFill updateTime = new TableFill(&amp;amp;quot;updateTime&amp;amp;quot;, FieldFill.INSERT_UPDATE);\nArrayList&amp;amp;lt;TableFill&amp;amp;gt; tableFills = new ArrayList&amp;amp;lt;&amp;amp;gt;();\ntableFills.add(createTime);\ntableFills.add(updateTime);\nstrategy.setTableFillList(tableFills);\n//乐观锁\nstrategy.setVersionFieldName(&amp;amp;quot;version&amp;amp;quot;);\nstrategy.setRestControllerStyle(true);\nstrategy.setControllerMappingHyphenStyle(true);//url中使用_</p>\n<p>mpg.setStrategy(strategy);</p>\n<p>mpg.execute();//执行\n</code></pre></p>\n<p>}\n</code></pre></p>\n<p>}\n</code></pre></p>\n<ul>\n<li>依赖jar</li>\n</ul>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n<pre><code>  &lt;!-- 模板引擎 --&gt;\n<pre><code>&lt;dependency&gt;\n<pre><code>&lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\n<p>&lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.0&lt;/version&gt;\n</code></pre></p>\n<p>&lt;/dependency&gt;\n</code></pre></p>\n<p></code></pre></p>\n<p></code></pre></p>\n<h1 id=\"redis\">Redis</h1>\n<h2 id=\"nosql的四大分类\">NoSQL的四大分类</h2>\n<p><strong>KV键值对：</strong></p>\n<ul>\n<li>redis</li>\n<li>memcache</li>\n<li>tair</li>\n</ul>\n<p><strong>文档型数据库(bson格式和json一样)：</strong></p>\n<ul>\n<li>MongoDB是一个基于分布式文件存储的数据库，由C++编写，主要用来处理大量的文档</li>\n<li>MongoDB是一个介于关系型数据库和非关系型数据的中间产品，MongoDB是菲关系型数据库中功能最丰富，最像关系型数据库的！</li>\n<li>ConthDB</li>\n</ul>\n<p><strong>列存储数据库</strong></p>\n<ul>\n<li>HBase</li>\n<li>分布式文件系统</li>\n</ul>\n<p><strong>图关系数据库</strong></p>\n<ul>\n<li>不是存储图形，放的是关系，比如：朋友圈社交网络，广告推荐！</li>\n<li>Neo4j,InfoGrid;</li>\n</ul>\n', 'https://picsum.photos/800/450?image=1005', '原创', 51, 1, 1, 1, 1, 1, '2020-11-19 17:12:11', '2020-12-30 14:19:02', 3, 1);
INSERT INTO `t_blog` VALUES (6, 'SpringCloud', '<h1 id=\"springcloud\">SpringCloud</h1>\n<p>参考书</p>\n<ul>\n<li>\n<p>https://www.springcloud.cc/spring-cloud-netflix.html</p>\n</li>\n<li>\n<p>中文API文档：https://www.springcloud.cc/spring-cloud-dalston.html</p>\n</li>\n<li>\n<p>springCloud中国社区http://springcloud.cn/</p>\n</li>\n<li>\n<p>springCloud中文网https://www.springcloud.cc/</p>\n</li>\n<li>\n<p>依赖</p>\n</li>\n</ul>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies --&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;Hoxton.SR9&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<h1 id=\"eureka\">Eureka</h1>\n<ul>\n<li>引入依赖</li>\n</ul>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;\n    &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n<p></code></pre></p>\n<ul>\n<li>Eureka配置</li>\n</ul>\n<pre><code class=\"language-yaml\">server:\n  port: 7001\n#Eureka配置\neureka:\n  instance:\n    hostname: localhost #Eureka服务实例名\n  client:\n    register-with-eureka: false #表示是否向Eureka注册中心注册自己\n    fetch-registry: false #fetch-registry如果为false，表示自己为注册中心\n    service-url: #监控页面\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n</code></pre>\n<p>开启Eureka服务</p>\n<blockquote>\n<pre><code class=\"language-java\">@EnableEurekaServer //EnableEurekaServer 服务端的启动类，可以接受别人注册进来\n</code></pre>\n</blockquote>\n<h2 id=\"注册服务到eureka\">注册服务到Eureka</h2>\n<ul>\n<li>\n<p>导入依赖</p>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;\n            &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n<pre><code>    &amp;lt;!--actuator配置监控信息页面--&amp;gt;\n    &amp;lt;dependency&amp;gt;\n        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;\n        &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;\n    &amp;lt;/dependency&amp;gt;\n</code></pre>\n<p></code></pre></p>\n</li>\n<li>\n<p>配置信息</p>\n</li>\n</ul>\n<pre><code class=\"language-yaml\">#Eureka配置,服务注册到哪里\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:7001/eureka/\n  instance:\n    instance-id: springloud-provider-dept8001 #修改Eureka上的默认描述信息\n#服务信息\ninfo:\n  app.name: kuangshen-springcloud\n  company.name: blog.kuangstudy.com\n  build.artifactId: $project.artifactId$\n  build.version: $project.version$\n</code></pre>\n<ul>\n<li>加入以下构建信息显示项目名称</li>\n</ul>\n<pre><code class=\"language-xml\">&lt;build&gt;\n        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;\n        &lt;resources&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/resources&lt;/directory&gt;\n                &lt;filtering&gt;true&lt;/filtering&gt;\n            &lt;/resource&gt;\n        &lt;/resources&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;delimiters&gt;\n                        &lt;delimit&gt;$&lt;/delimit&gt;\n                    &lt;/delimiters&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre>\n<ul>\n<li>启动EurekaClient</li>\n</ul>\n<pre><code class=\"language-java\">@EnableEurekaClient//在服务启动后自动注入到Eureka\n</code></pre>\n<blockquote>\n<p>通过DiscoveryClient对象可以获得服务的信息</p>\n<pre><code class=\"language-java\">@Autowired\nprivate DiscoveryClient client;\n</code></pre>\n<p>需要开启发现服务注解</p>\n<pre><code class=\"language-java\">@EnableDiscoveryClient//服务发现\n</code></pre>\n</blockquote>\n<h2 id=\"cap原则\">CAP原则</h2>\n<ul>\n<li>回顾CAP原则</li>\n</ul>\n<p>RDBMS(Mysql,Oracle,SqlServer)====&gt;ACID</p>\n<p>NoSQL（redis,mogodb）====&gt;CAP</p>\n<p><strong>ACID是什么？</strong></p>\n<ul>\n<li>A (Atomicity)原子性</li>\n<li>C (Consistency)一致性</li>\n<li>I (Isolation)隔离性</li>\n<li>D (Durability)持久性</li>\n</ul>\n<p><strong>CAP是什么？</strong></p>\n<ul>\n<li>C (Consistency)强一致性</li>\n<li>A (Availability)可用性</li>\n<li>P (Partition tolerance) 分区容错性</li>\n</ul>\n<p>CAP的三进二： CA, AP, CP</p>\n<p><strong>CAP理论的核心</strong></p>\n<ul>\n<li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li>\n<li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类\n<ul>\n<li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>\n<li>CP: 满足一致性，分区容错性的系统，通常性能不是特别高</li>\n<li>AP：满足可用性，分区容错性系统，通常可能对一致性要求低一些</li>\n</ul>\n</li>\n</ul>\n<p><strong>rpc和http的区别是什么</strong></p>\n<p>rpc和http的存在重大不同的是：http请求是使用具有标准语义的通用的接口定向到 资源的，这些语义能够被中间组件和提供服务的来源机器进行解释。结果是使得一个 应用支持分层的转换(layers of transformation)和间接层(indirection)，并且独立 于消息的来源，这对于一个Internet规模、多个组织、无法控制的可伸缩性的信息系 统来说，是非常有用的。与之相比较，rpc的机制是根据语言的API(language API) 来定义的，而不是根据基于网络的应用来定义的。</p>\n<h2 id=\"ribbon\">Ribbon</h2>\n<ul>\n<li>什么是Ribbon?</li>\n</ul>\n<p>Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现。通过Spring Cloud的封装，可以让我们轻松地<strong>将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用</strong>。Spring Cloud Ribbon虽然只是一个工具类框架，它不像服务注册中心、配置中心、API网关那样需要独立部署，但是它几乎存在于每一个Spring Cloud构建的微服务和基础设施中。因为微服务间的调用，API网关的请求转发等内容，实际上都是通过Ribbon来实现的，包括后续我们将要介绍的Feign，它也是基于Ribbon实现的工具。所以，对Spring Cloud Ribbon的理解和使用，对于我们使用Spring Cloud来构建微服务非常重要。</p>\n<ul>\n<li>引入依赖</li>\n</ul>\n<pre><code class=\"language-xml\">		&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n		&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-			starter-eureka --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;\n            &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<ul>\n<li>配置类</li>\n</ul>\n<pre><code class=\"language-java\">//配置负载均衡实现RestTemplate\n    @Bean\n    @LoadBalanced\n    public RestTemplate getRestTemplate(){\n        return new RestTemplate();\n    }\n</code></pre>\n<ul>\n<li>配置一个负载均衡的实现</li>\n</ul>\n<pre><code class=\"language-java\">@Bean\n    public IRule getIRule(){\n        return new RandomRule();\n    }\n</code></pre>\n<blockquote>\n<p>注意：自定义负载均衡的实现不能在启动类下建包否则会被ComponentSca扫描到</p>\n</blockquote>\n<h2 id=\"feign\">Feign</h2>\n<ul>\n<li>引入依赖</li>\n</ul>\n<pre><code class=\"language-xml\">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-feign --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;\n            &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>在接口上标注@FeignClient通过value标注服务名称</p>\n<pre><code class=\"language-java\">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)\n</code></pre>\n</blockquote>\n<h2 id=\"hystrix\">Hystrix</h2>\n<ul>\n<li>服务熔断解决方案</li>\n</ul>\n<pre><code class=\"language-xml\">		&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;\n            &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>使用**@HystrixCommand**(fallbackMethod = &quot;hystrixGet&quot;)</p>\n<p>在服务发生异常时调用失败方法</p>\n<p>在主启动类标明注解@EnableCircuitBreaker//添加对熔断的支持</p>\n</blockquote>\n<ul>\n<li>\n<p>服务降级</p>\n</li>\n<li>\n<p>hystrix dashboard监控页面开启</p>\n<p>引入依赖</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;\n            &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;\n        &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<p></code></pre></p>\n</li>\n</ul>\n', 'https://picsum.photos/800/450?image=1005', '原创', 16, NULL, NULL, NULL, 1, 1, '2020-10-19 17:34:55', '2020-12-30 14:19:12', 9, 1);
INSERT INTO `t_blog` VALUES (9, '钉钉内网穿透工具', '<h1 id=\"前言\">前言</h1>\n<p>该篇文章记录了如何使用钉钉的内网穿透：<a href=\"https://ding-doc.dingtalk.com/doc#/kn6zg7/hb7000\" target=\"_blank\">内网穿透之HTTP穿透</a></p>\n<h1 id=\"一教程\">一、教程</h1>\n<h3 id=\"1下载工具\">1.下载工具</h3>\n<p>方式一：可以使用git的clone命令克隆到本地来</p>\n<pre><code class=\"language-bash\">git clone https://github.com/open-dingtalk/pierced.git\n</code></pre>\n<p>方式二：直接访问github上的地址，下载zip压缩包\ngithub下载pierced地址</p>\n<p>下载完成后有三个文件夹和一个Readme.md文件：linux、mac_64、windows_64。</p>\n<p>找到自己对应的操作系统，点击进去可以看到两个文件。一个为配置文件（.cfg结尾），另一个为需要运行的文件。</p>\n<h3 id=\"2运行以win为例\">2.运行（以win为例）</h3>\n<p>我是windows操作系统点进去目录可以看到：ding.cfg （配置文件）和 ding.exe（cmd命令行运行的文件）。</p>\n<p>命令如下：</p>\n<pre><code># 进入可以运行ding.exe文件的目录（windows_64目录）\ncd X:xxx/windows_64\n# 运行ding.exe文件，参数-subdomain后面的changsheng代表 一会儿域名访问的前缀，80代表我要代理的本地端口\nding.exe -config=./ding.cfg -subdomain=changsheng 80\n# 如果出现提示：Server failed to allocate tunnel: The tunnel http://changsheng.vaiwan.com is already registered.\n# 说明你需要换一下-subdomain后面的域名前缀或者端口了。\n123456\n</code></pre>\n<p>命令参数说明：摘自官网</p>\n<table class=\"ui celled table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-config</td>\n<td>内网穿透的配置文件，按命令照示例固定为钉钉提供的./ding.cfg，无需修改</td>\n</tr>\n<tr>\n<td>-subdomain</td>\n<td>您需要使用的域名前缀，该前缀将会匹配到“vaiwan.com”前面，例如你的subdomain是abcde，启动工具后会将abcde.vaiwan.com映射到本地。</td>\n</tr>\n<tr>\n<td>端口</td>\n<td>您需要代理的本地服务http-server端口，例如你本地端口为8080等</td>\n</tr>\n</tbody>\n</table>\n<p>穿透成功地址：此时访问 http://changsheng.vaiwan.com/login 就可以访问我们本地代理的127.0.0.1:80（等于localhost:80）。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200811173203654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzNDMyOA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p>注意：这个命令行界面不要关闭，关闭后内网穿透就关闭了。</p>\n', 'https://picsum.photos/800/450?image=1005', '转载', 64, 1, 1, 1, 1, 1, '2020-12-23 15:40:01', '2021-01-04 18:59:45', 11, 1);
INSERT INTO `t_blog` VALUES (12, 'war和war exploaded的区别', '## 1.war和war exploded的区别\r\n\r\n#### 是选择war还是war exploded，这里首先看一下他们两个的区别：\r\n\r\n#### 1.war模式这种可以称之为是发布模式，就是先将WEB工程打成war包，然后再将其上传到服务器进行发布 。；\r\n\r\n#### 2.war exploded模式是将WEB工程以当前文件夹的位置关系上传到服务器，即直接把文件夹、jsp页面 、classes等等移到Tomcat 部署文件夹里面，进行加载部署。因此这种方式支持热部署，一般在开发的时候也是用这种方式。\r\n\r\n#### 在平时开发的时候，使用热部署的话，应该对Tomcat进行相应的设置，这样的话修改的jsp界面什么的东西才可以及时的显示出来。\r\n\r\n# 什么是热部署\r\n\r\n#### 所谓热部署，就是在应用正在运行的时候升级软件，却不需要重新启动应用。 　　对于Java应用程序来说，热部署就是在运行时更新Java类文件。\r\n\r\n## 注意点\r\n\r\n  （1）在使用war模式开发的时候，通过下边这段代码获取项目的相对路径： \r\n\r\nString contextPath = request.getSession().getServletContext().getRealPath(\"/\")*;* \r\n\r\n\r\n\r\n 可以看出通过`war模式`是最终打包部署到Tomcat的位置。 \r\n\r\n （2）然后再看`war exploded模式`,同样进行设置 \r\n\r\n\r\n\r\n 可以看出最终得到的是我这个项目的位置，其实就是这个项目target的位置。 \r\n\r\n', 'https://picsum.photos/800/450?image=1005', '原创', 39, 1, 1, 1, 1, 1, '2020-12-23 19:02:20', '2021-01-04 18:56:44', 11, 1);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `content` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '内容',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `createTime` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `b_id` bigint NULL DEFAULT NULL COMMENT '博客ID',
  `parent_comment_id` bigint NULL DEFAULT NULL COMMENT '自关联ID',
  `adminComment` tinyint(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 45 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (37, 'hdh', 'vueue', 'evilve.vaiwan.com', '/images/avatar.png', '2020-12-24 15:47:47', 12, NULL, 0);
INSERT INTO `t_comment` VALUES (38, 'hdh', 'vueue', '哈哈哈', '/images/avatar.png', '2020-12-24 15:48:08', 12, NULL, 0);
INSERT INTO `t_comment` VALUES (39, 'Evilve', '201269239@qq.com', '管理员回复', 'https://picsum.photos/800/600?image=1005', '2020-12-30 13:22:59', 12, NULL, 1);
INSERT INTO `t_comment` VALUES (40, '老王', '123@qq.com', '这是啥呀', '/images/avatar.png', '2020-12-30 13:27:46', 5, NULL, 0);
INSERT INTO `t_comment` VALUES (41, '玮哥', '123@qq.com', '666', '/images/avatar.png', '2020-12-30 13:28:06', 5, NULL, 0);
INSERT INTO `t_comment` VALUES (42, '玮哥', '123@qq.com', 'aaaaaaaaaaaaaa', '/images/avatar.png', '2020-12-30 13:28:23', 5, 41, 0);
INSERT INTO `t_comment` VALUES (43, '玮哥', '123@qq.com', '好屌啊', '/images/avatar.png', '2020-12-30 13:28:34', 5, NULL, 0);
INSERT INTO `t_comment` VALUES (44, '玮哥', '123@qq.com', '好屌啊', '/images/avatar.png', '2020-12-30 13:28:43', 5, NULL, 0);
INSERT INTO `t_comment` VALUES (45, 'Evilve', '201269239@qq.com', '这是我的个人博客', 'https://picsum.photos/800/600?image=1005', '2020-12-30 13:29:07', 5, 42, 1);

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '类型名',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES (3, 'javaScript');
INSERT INTO `t_type` VALUES (4, 'SpringBoot');
INSERT INTO `t_type` VALUES (5, 'Vue');
INSERT INTO `t_type` VALUES (6, 'HTML');
INSERT INTO `t_type` VALUES (7, 'jQuery');
INSERT INTO `t_type` VALUES (8, 'MySQL');
INSERT INTO `t_type` VALUES (9, 'BootStrap');
INSERT INTO `t_type` VALUES (11, '其他');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` bigint NOT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '密码',
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `type` int NULL DEFAULT NULL COMMENT '类型',
  `createTime` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `updateTime` timestamp NULL DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, 'Evilve', 'admin', 'a87ea3d354d82090cc2e06f0a299fb5a', '201269239@qq.com', 'https://picsum.photos/800/600?image=1005', 1, '2020-12-11 17:41:38', '2020-12-11 17:42:23');

SET FOREIGN_KEY_CHECKS = 1;
